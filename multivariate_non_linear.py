# -*- coding: utf-8 -*-
"""multivariate non linear

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QGzZiXK-hShCYWRhx0pzMj0JhvwtHMjx
"""

import tensorflow as tf
import numpy as np
import matplotlib.pylab as plt
import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()  #placeholders don't work in tf.versions>2
# [:,np.newaxis] is to transform one-dimensional data into two-dimensional data

Y =[]
x_data = np.random.randn(50,2)
for i in range(0,50):
    y = np.sin(x_data[i][0]+np.square(x_data[i][1]))
    Y.append(y)

print(Y)

epsilon= 0.5
Y = np.array(Y) + epsilon

print(Y.shape)

x = tf.placeholder(tf.float32, [None, 2])
y = tf.placeholder(tf.float32, [None, 2])

 # input layer 1 neuron
 # define the neural network middle layer
 # intermediate layer uses 10 neurons
 # output layer 1 neuron :P
Weight_L1 = tf.Variable(tf.random_normal([2, 10]))
biases_L1 = tf.Variable(tf.zeros([2, 10]))
Wx_plus_b_L1 = tf.matmul(x, Weight_L1) + biases_L1

 # Activation function tanh
L1 = tf.nn.tanh(Wx_plus_b_L1)

 # Define the neural network output layer
Weight_L2 = tf.Variable(tf.random_normal([10, 1]))
biases_L2 = tf.Variable(tf.zeros([1, 1]))
Wx_plus_b_L2 = tf.matmul(L1, Weight_L2) + biases_L2

prediction = tf.nn.tanh(Wx_plus_b_L2)

 # secondary cost function
loss = tf.reduce_mean(tf.square(y - prediction))       #tf.reduce_mean equivalent to np.mean

 # Training using gradient descent
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)


with tf.Session() as sess:
    init = tf.initialize_all_variables()
    sess.run(init)
    for step in range(2000):
                 sess.run(train_step, feed_dict={x: x_data, y: Y}) #pass in sample value

     
    prediction_value = sess.run(prediction, feed_dict={x: x_data})

         # 
    plt.figure()
    plt.scatter(x_data, Y_data)
    plt.plot(x_data, prediction_value, 'r-', lw=5)
    plt.show()